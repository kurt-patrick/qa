Pre-requisite steps
- Android studio installed
- Appium installed
- Visual Studio installed and configured
- PATH variable updated and adb command can be run
- C:\Users\LocalUser\AppData\Local\Android\sdk\platform-tools\adb.exe
- C:\Users\LocalUser\AppData\Local\Android\sdk\tools\uiautomatorviewer.bat

# Determining the deviceName for a real or emulated device
Open cmd.exe then run commands [ "adb start-server", "adb devices" ]

# stopping / killing adb
Open cmd.exe then run command "adb kill-server"

# starting an app on a real device via adb
adb shell am start -n au.com.bankwest.mobile/au.com.bankwest.mobile.activity.LoginActivity
adb shell am start -n io.selendroid.testapp/.HomeScreenActivity

# locating elements on an adroid app
start the app you want to work with either in the emulator or on a device
run C:\Users\LocalUser\AppData\Local\Android\sdk\tools\uiautomatorviewer.bat
Click one of the Device Screenshot buttons (there are 2)
Mouse over the elements to see the list of locators

# Appium desktop server
https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md

{
  "platformName": "iOS, Android, or FirefoxOS",
  "automationName": "Appium (default) or Selendroid",
  "platformVersion": "5.0.1",
  "deviceName": "On iOS, this should be one of the valid devices returned by instruments with instruments -s devices. On Android this capability is currently ignored",
  "appPackage": "io.selendroid.testapp",
  "appActivity": ".HomeScreenActivity",
  "udid": "This is only required for REAL DEVICES",
  "app": "The absolute local path or remote http URL to an .ipa or .apk file, or a .zip - 
	Note that this capability is not required for Android if you specify appPackage and appActivity"  
}

# Real Android Device Connecting to Installed Application
{
  "platformName": "Android",
  "automationName": "Appium",
  "platformVersion": "5.0.1",
  "deviceName": "ignoredOnAndroid",
  "appPackage": "io.selendroid.testapp",
  "appActivity": ".HomeScreenActivity",
  "udid": "the value listed from adb devices"
}

# Real Android Device APK specified
{
  "platformName": "Android",
  "automationName": "Appium",
  "platformVersion": "5.0.1",
  "deviceName": "ignoredOnAndroid",
  "udid": "the value listed from adb devices"
  "app": "D:\\selendroid-test-app-0.17.0.apk"
}

# Emulator - Android - APK specified
To run in the emulator:
-Open Android studio
-Start the emualtor
-run adb devices and get the udid

{
  "platformName": "Android",
  "automationName": "Appium",
  "platformVersion": "7.1.1",
  "deviceName": "ignoredOnAndroid",
  "udid": "emulator-5554"
  "app": "D:\\selendroid-test-app-0.17.0.apk"
}

# Getting page source for an app from the browser
http://127.0.0.1:4723/wd/hub/sessions
http://127.0.0.1:4723/wd/hub/session/d6cdd6bf-e70b-4ea3-9696-aa37372f5dcb/source

# getting package and activity information of an open app using adb
adb devices
adb -s DEVICEudid shell dumpsys activity activities

# displays all the elements on the current activity displayed
# Dump the top activity
adb -s DEVICEudid shell dumpsys activity top
adb -s a710eaec shell dumpsys activity top

https://ar-g.github.io/ADB-Shell-Part-3/
https://stackoverflow.com/questions/24429049/get-info-of-current-visible-fragments-in-android-dumpsys

How to get kernel messages from Android? 
http://bootloader.wikidot.com/linux:android:kmsg

# This is the same as # Dump the top activity
jakiganicsystems.simplestchecklist/.MainActivity
adb shell dumpsys activity jakiganicsystems.simplestchecklist/.MainActivity

# appium docs
https://github.com/appium/appium/tree/master/docs/en/writing-running-appium

#using adb to export ui as xml
1. adb shell uiautomator dump -X
2. make a note of the path the file is written to e.g. /storage/emulated/legacy/window_dump.xml
3. [windows] adb pull /storage/emulated/legacy/window_dump.xml d:\dumpFolder
4. [mac] adb pull /storage/emulated/legacy/window_dump.xml /Users/me/dumpFolder

# websites
Working with xpath and locator strategies
https://github.com/appium/appium/issues/7085

https://developer.android.com/reference/android/support/test/uiautomator/UiScrollable.html
https://www.3pillarglobal.com/insights/appium-tips-and-tricks-for-ios

start appium server from code
https://github.com/appium/appium-dotnet-driver/blob/master/appium-dotnet-driver/Appium/Service/AppiumLocalService.cs

https://github.com/nunit/docs/wiki/SetUpFixture-Attribute
http://teststackbddfy.readthedocs.io/en/latest/Usage/FluentAPI/
https://github.com/appium/appium-dotnet-driver/blob/master/appium-dotnet-driver/Appium/PageObjects/AppiumPageObjectMemberDecorator.cs
https://github.com/appium/appium-dotnet-driver/blob/master/appium-dotnet-driver/Appium/MobileBy.cs
https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/support/CacheLookup.java
http://robdmoore.id.au/blog/2013/05/26/test-data-generation-the-right-way-object-mother-test-data-builders-nsubstitute-nbuilder/
http://xunitpatterns.com/Testcase%20Class%20per%20Fixture.html
https://github.com/appium/appium-dotnet-driver/wiki
https://github.com/appium/sample-code/tree/master/sample-code/examples/dotnet/AppiumDotNetSample/PageObjects
https://github.com/appium/sample-code/tree/master/sample-code/examples/dotnet/AppiumDotNetSample/PageObjectTests
https://discuss.appium.io/t/how-can-i-use-multiple-findby-annotations-in-c-for-both-ios-and-android-in-the-same-page-object/7303/2


